# -*- mode: sh; coding: utf-8; -*-

[ -f /etc/zsh/zshrc ] && source /etc/zsh/zshrc

############################################################
##  外部設定ファイル

source_if_exist(){
    if [ ! -f "$1" ]
    then
        return 1
    fi
    echo load "$1"
    source "$1"
}

readlink_f() {
    python -c "import os; print(os.path.realpath('$1'))"
}

############################################################
# java
if [[ -e /usr/libexec/java_home ]]
then JAVA_HOME="$(/usr/libexec/java_home)"
elif [[ -n "$JAVA_HOME" ]]
then : # do nothing
elif which jar &>/dev/null
then JAVA_HOME="$(readlink_f $(which jar | head -n 1) | xargs dirname | xargs dirname)"
elif which java &>/dev/null
then JAVA_HOME="$(readlink_f $(which java | head -n 1) | xargs dirname | xargs dirname)"
fi
[[ -n "${JAVA_HOME}" ]] && export JAVA_HOME

############################################################
# go
export GOPATH="$HOME/golang"

############################################################
# パスの設定
## (N-/): 存在しないディレクトリは登録しない。
##    パス(...): ...という条件にマッチするパスのみ残す。
##            N: NULL_GLOBオプションを設定。
##               globがマッチしなかったり存在しないパスを無視する。
##            -: シンボリックリンク先のパスを評価。
##            /: ディレクトリのみ残す。
##
path=(
    # ./node_modules/.bin
    $HOME/.{settings,dotfiles}/bin(N-/)
    $HOME/{.rvm,.rbenv,local,.local}/bin(N-/)
    $HOME/.nodebrew/current/bin(N-/)
    $HOME/.homebrew/bin(N-/)
    $GEM_HOME/bin(N-/)
    $GOPATH/bin
    /opt/local/bin(N-/)
    $path
    /usr/local/heroku/bin(N-/)
    /usr/local/go/bin(N-/)
    /usr/local/{rvm,rbenv}/bin(N-/)
    /app/{script,mingw/tdm/bin,gs/bin,gs/lib}(N-/)
    /usr{/local,/usr,}/bin(N-/)
    /usr/local/kui-avconv/bin(N-/)
)

pixels-fortune

manpath=(
    $(which brew &>/dev/null && echo "$(brew --prefix)/share/man(N-/)")
    $manpath
)

[ -z "$sudo_path" ] && typeset -xT SUDO_PATH sudo_path
sudo_path=(
    /opt/local/sbin(N-/)
    {,/usr/pkg,/usr/local,/usr}/sbin(N-/)
    $sudo_path $path
)

[ -z "$ld_library_path" ] && typeset -xT LD_LIBRARY_PATH ld_library_path
ld_library_path=(
    $HOME/.homebrew/lib(N-/)
    /usr/local/kui-avconv/lib(N-/)
    /opt/local/lib(N-/)
    $ld_library_path
)

[ -z "$include" ] && typeset -xT INCLUDE include
include=(
    $HOME/.homebrew/include(N-/)
    /usr/local/kui-avconv/include(N-/)
    /opt/local/include
    $include
)
export CPATH=$INCLUDE

[ -z "$fpath" ] && typeset -xT FPATH include
fpath=(
    {$HOME/.rvm,/usr/local/rvm}/scripts/zsh/Completion(N-/)
    $HOME/.zshrc.d/grunt-zsh-completion(N-/)
    $HOME/.zshrc.d/completion(N-/)
    $HOME/.zshrc.d/zsh-completions/src(N-/)
    $fpath)

if [ $TERM = "xterm" ] && infocmp xterm-256color &>/dev/null; then
    export TERM="xterm-256color"
fi

if which brew &>/dev/null; then
    manpath=(
        $(brew --prefix)/share/man(N-/)
        $manpath
    )

    for dir in $(brew --prefix)/opt/*/libexec
    do
        path=(
            ${dir}/gnubin(N-/)
            $path
        )
        manpath=(
            ${dir}/gnuman(N-/)
            $manpath
        )
    done
fi

# 表示言語設定
export LANG=ja_JP.UTF-8

## 補完機能の強化
autoload -U compinit
compinit -u

_cake(){
    if [[ -f Cakefile ]]
    then
        compadd $(cake | grep '^cake ' | sed -e "s/cake \([^ ]*\) .*/\1/" | grep -v '^$')
    fi
}
compdef _cake cake

# reffer https://github.com/RiotGames/berkshelf/blob/master/berkshelf-complete.sh
_berks(){
    compadd $(berks help | grep -E '^ +berks' | cut -d' ' -f4)
}
compdef _berks berks

_kitchen(){
    compadd $(kitchen help | grep -E '^ +kitchen' | cut -d' ' -f4)
}
compdef _kitchen kitchen

############################################################
## alias, funcction の設定

alias less="less -R"
alias grep="grep --color"

if   ls -F --color &>/dev/null;  then alias ls="ls -F --color=auto"
elif gls -F --color &>/dev/null; then alias ls="gls -F --color=auto"
elif ls -F -G &>/dev/null;       then alias ls="ls -F -G"
fi

if which tmux &> /dev/null
then
    alias t="tmux new-window"
fi

if which reattach-to-user-namespace &>/dev/null
then
    alias terminal-notifier='reattach-to-user-namespace terminal-notifier'
fi

eval $(dircolors)

# HTTPサーバを立ち上げる
function serve(){
    local port=${SERVE_PORT:-8007}

    local current_dir="$(pwd)"
    local dir file
    if [[ $# -eq 0 ]]; then
        # no-op
    elif [[ -d "$1" ]]; then
        dir="$1"
    elif [[ -f "$1" ]]; then
        dir="$(dirname "$1")"
        file="$(basename "$1")"
    else
        echo "Not Found $1" >&2
        return 1
    fi

    if [[ -n "$dir" ]]
    then
        color_echo green "Serve $dir"
        cd "$dir"
    else
        color_echo green "Serve the current directory"
    fi
    python -m SimpleHTTPServer $port &
    cd "${current_dir}"

    local url="http://localhost:$port/$file"
    color_echo green "Open $url"
    if which sensible-browser &> /dev/null; then
        sensible-browser "$url"
    elif which xdg-open &> /dev/null; then
        xdg-open "$url"
    fi

    fg
}
alias http-serve=serve

list_parents() {
    local p="${1:=$PWD}"
    printf "$p\n"
    if [[ "$p" != "/" ]]; then
        list_parents "$(dirname "$p")"
    fi
}

if which emacsclientw &> /dev/null; then
    alias e="emacsclientw --no-wait"
    export EDITOR=emacsclientw
fi

if clipboard test &>/dev/null; then
    if [[ -n "$TMUX" ]]; then
        tmux bind-key C-y run 'clipboard paste | tmux load-buffer - && tmux paste-buffer'
        tmux bind-key -Tcopy-mode C-w send-keys -X copy-pipe-and-cancel 'clipboard copy'
        tmux bind-key -Tcopy-mode M-w send-keys -X copy-pipe-and-cancel 'clipboard copy'
    fi
fi

## 色一覧
color_list() {
    for c in {000..015}
    do
        print -nP "%F{${c}} $c"
        [[ $((c%8)) -eq 7 ]] && print
    done

    for c in {016..255}
    do
        print -nP "%F{${c}} $c"
        [[ $(((c-16)%6)) -eq 5 ]] && print
    done
}

# open
if [[ -f /usr/bin/xdg-open ]]
then alias open=/usr/bin/xdg-open
fi
alias o=open

color_echo(){
    if [[ $# -lt 1 ]]
    then
        (
            echo "usage: $0 COLOR [string...]"
            echo "  COLOR: black, gray, red, green, blue, brown, purple, cyan, [0-7]"
            echo "sample 1: $0 red foo"
            echo "sample 2: $0 1 foo"
        ) >&2
        return 1
    fi

    local c="$1"; shift
    case "$c" in
        black)  c="0";;
        red)    c="1";;
        green)  c="2";;
        brown)  c="3";;
        blue)   c="4";;
        purple) c="5";;
        cyan)   c="6";;
        gray)   c="7";;
        [1-7])  ;; # no-op
        *)
            echo "unknown COLOR: $c"
            return 1
    esac

    echo "\e[3${c}m$@\e[39m"
}

## 256色生成用便利関数
### red: 0-5
### green: 0-5
### blue: 0-5
color256(){
    echo -n $(($1 * 36 + $2 * 6 + $3 + 16))
}

color256_echo(){
    if [[ $# -lt 3 ]]
    then
        (
            echo "usage: $0 RED GREEN BLUE [string...]"
            echo "  RED, GREEN, BLUE: 0-5"
            echo "sample: $0 0 5 5 foo"
        ) >&2
        return 1
    fi

    local r=$1; shift
    local g=$1; shift
    local b=$1; shift

    echo "\e[38;5;$(color256 $r $g $b)m$@\e[39m"
}

#####################################################################
# バージョンシステム管理下のディレクトリにいる時の諸々の設定
autoload -Uz vcs_info
zstyle ':vcs_info:*' enable git cvs svn
zstyle ':vcs_info:*' get-revision true
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:*' max-exports 1
zstyle ':vcs_info:*' formats '%f:%F{red}%B%c%u%%b%F{green}%s/%b(%i) '
zstyle ':vcs_info:*' actionformats '%f:%F{red}%B%c%u%b%F{red}%s/%b(%i)/%a '
zstyle ':vcs_info:git:*' formats '%f:%F{red}%B%c%u%%b%F{green}%s/%b '
zstyle ':vcs_info:git:*' actionformats '%f:%F{blue}%B%c%u%%b%F{red}%s/%b/%a '

# 作業コピーに変更があった場合に表示される文字列
zstyle ':vcs_info:*' unstagedstr "*"
# インデックスに追加された場合に表示される文字列
zstyle ':vcs_info:*' stagedstr "+"

# bzr のとき、vcs_info でネットワーク使わせない
zstyle ':vcs_info:bzr:*' use-simple true

color256(){
    echo -n $(($1 * 36 + $2 * 6 + $3 + 16))
}

ansi_brightness() {
    if [[ 16 -le $1 && $1 -le 231 ]]; then
        local base=$(($1 - 16))
        local r=$((base / 36)) \
              g=$((base % 36 / 6)) \
              b=$((base % 6))
        printf '%f\n' $((r/5.0*299 + g/5.0*587 + b/5.0*114))
        return 0
    elif [[ 232 -le $1 && $1 -le 255 ]]; then
        printf '%f\n' $((255 * ($1 - 232) / (255 - 232)))
        return 0
    else
        echo "Invalid ANSI Color Code: $1" 2>/dev/null
        return 1
    fi
}

# 16 色環境向け
color_codes=(1 2 4 5 6 9 10 12 13 14)

# 256 色環境向け
if [ "$(echotc Co)" = "256" ]; then
    color_codes=()
    for c in {16..255}; do
        b=$(ansi_brightness $c)
        # if [[ $b -le 500 ]] # デフォルトバックグラウンドが明るい色の時
        if [[ $b -ge 500 ]] # デフォルトバックグラウンドが暗い色の時
        then color_codes=($color_codes $c)
        fi
    done
fi
export color_codes

color_code_from_str() {
    local h=$(sum <<< "$1" | cut -f1 -d' ')
    local i=$((h % ${#color_codes}))
    printf ${color_codes[i]}
}

typeset -agx prompt_opts

echo_job_info() {
    print -n '%(1j.%f:%F{red}jobs/%j .)'
}
prompt_opts+=echo_job_info

echo_vcs_info() {
    vcs_info
    print -n "$vcs_info_msg_0_"
}
prompt_opts+=echo_vcs_info

echo_rbenv_version() {
    type rbenv &>/dev/null || return

    local v=$(rbenv version-name)
    if [[ "$v" != 'system' ]]; then
        print -n "%f:%F{196}rbenv/$v "
    fi
}
prompt_opts+=echo_rbenv_version

echo_pyenv_version() {
    type pyenv &>/dev/null || return

    local v=$(pyenv version-name)
    if [[ "$v" != 'system' ]]; then
        print -n "%f:%F{166}pyenv/$v "
    fi
}
prompt_opts+=echo_pyenv_version

user="%F{$(color_code_from_str "$USER")}%n"
host="%F{$(color_code_from_str "$HOST")}%m"
tmux=
if [[ -n "$TMUX" ]]; then
    tmux_str="$(tmux display-message -p '#I.#P')"
    tmux="%f[%F{$(color_code_from_str "${tmux_str}")}${tmux_str}%f]"
fi
PROMPT='%(?.%F{243}.%F{red})%U${(l:COLUMNS:: :)?}%u
'"$user"'%f@'"$host$tmux"'%f:%F{yellow}%~ $(for f in "${prompt_opts[@]}"; "$f")
%(?.%f.%F{red})%(!.#.$)%f '

############################################################
##  screen の window タイトルを設定
update_screen_title() {
    local shell="$(basename "$SHELL")"
    local dir="$(basename $(print -P '%~'))"
    screen -X title "${shell}#${dir}"
}
[ "$STY" ] && precmd_functions=($precmd_functions update_screen_title)

############################################################
##  cdr の設定
autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
add-zsh-hook chpwd chpwd_recent_dirs
zstyle ':chpwd:*' recent-dirs-max 1000
zstyle ':chpwd:*' recent-dirs-default yes
zstyle ':completion:*' recent-dirs-insert both

############################################################
##  zsh プロパティ

HISTFILE=$HOME/.zsh-history
HISTSIZE=100000
SAVEHIST=100000

## コアダンプサイズを制限
limit coredumpsize 102400

## 出力の文字列末尾に改行コードが無い場合でも表示
unsetopt promptcr

## 色を使う
setopt prompt_subst

## ビープを鳴らさない
setopt nobeep

## 内部コマンド jobs の出力をデフォルトで jobs -l にする
setopt long_list_jobs

## 補完候補一覧でファイルの種別をマーク表示
setopt list_types

## サスペンド中のプロセスと同じコマンド名を実行した場合はリジューム
# setopt auto_resume

## 補完候補を一覧表示
setopt auto_list

## 直前と同じコマンドをヒストリに追加しない
setopt hist_ignore_dups

## cd 時に自動で push
setopt autopushd

## 同じディレクトリを pushd しない
setopt pushd_ignore_dups

## ファイル名で #, ~, ^ の 3 文字を正規表現として扱う
setopt extended_glob

## TAB で順に補完候補を切り替える
setopt auto_menu

## zsh の開始, 終了時刻をヒストリファイルに書き込む
setopt extended_history

## =command を command のパス名に展開する
setopt equals

## --prefix=/usr などの = 以降も補完
setopt magic_equal_subst

## ヒストリを呼び出してから実行する間に一旦編集
setopt hist_verify

## ファイル名の展開で辞書順ではなく数値的にソート
setopt numeric_glob_sort

## 出力時8ビットを通す
setopt print_eight_bit

## ヒストリを共有
setopt share_history

## command > file によるファイル上書きを禁止
setopt noclobber

## 補完候補のカーソル選択を有効に
zstyle ':completion:*:default' menu select=1

## 補完候補の色づけ
zstyle ':completion:*:default' list-colors "${LS_COLORS}"

## ディレクトリ名だけで cd
# setopt auto_cd

## カッコの対応などを自動的に補完
setopt auto_param_keys

## ディレクトリ名の補完で末尾の / を自動的に付加し、次の補完に備える
setopt auto_param_slash

## スペルチェック
#setopt correct

## sudo時にはsudo用のパスも使う。
zstyle ':completion:sudo:*' environ PATH="$SUDO_PATH:$PATH"

## 特定のコマンドの補完を無効化
# compdef -d java

# エンターキー入力時の挙動
do_enter() {
    if [[ -n "$BUFFER" ]]
    then
        zle accept-line
        return 0
    fi

    echo

    local threshold=20
    if [[ $(ls -A1 | wc -l) -lt $threshold ]]
    then ls -Ahl
    elif [[ $(ls -1 | wc -l) -lt $threshold ]]
    then ls -hl
    else ls
    fi

    if [[ -n "$VCS_NAME" ]]
    then
        echo
        echo -e "\e[0;33m### $VCS_NAME status #################\e[0m"
        case "$VCS_NAME" in
            git | svn ) which "$VCS_NAME" > /dev/null 2>&1 && "$VCS_NAME" status ;;
        esac
    fi

    if [[ $( jobs | wc -l ) -gt 0 ]]
    then
        echo
        echo -e "\e[0;33m### jobs #############################\e[0m"
        jobs
    fi

    echo -e "\n\n"
    zle reset-prompt
    return 0
}
zle -N do_enter
bindkey '^m' do_enter

#############################################################
# fzf 関係
export FZF_DEFAULT_OPTS="--exact --reverse --color=dark,hl:177,fg+:82,hl+:207"

fzf-ps() {
    local p="$(ps -xww -opid -ocommand | sed 1d | \
               fzf-tmux --prompt='process > ' -n2.. | \
               perl -ne '/^\s*([\d]*)\s/; print $1, " " if $1')"
    if [ -n "$p" ]; then
        LBUFFER="${LBUFFER}${p:0:-1}"
        zle redisplay
    fi
}
zle     -N    fzf-ps

fzf-search-file() {
    local f="$(find -L . -type f -exec sh -c "file '{}' | grep -q text" \; -print | \
               xargs -I{} bash -c "cat '{}' | sed 's|^|{}: |'" | \
               fzf-tmux --prompt='search file > ' | \
               cut -d: -f1)"
    if [ -n "$f" ]; then
        LBUFFER="${LBUFFER}$f"
        zle redisplay
    fi
}
zle     -N    fzf-search-file

fzf-find-file() {
    local f="$(fzf-ff)"
    LBUFFER="${LBUFFER}$f"
    zle redisplay
}
zle     -N     fzf-find-file

fzf-exec() {
    local c="$(zle -la | grep -v '^\.' | fzf-tmux --prompt='exec widget > ')"
    [ -n "$c" ] && zle "$c"
    zle redisplay
}
zle     -N   fzf-exec

fzf-cd-history() {
    local d="$(cdr -l | sed -r 's/^[0-9]+ +//' | \
               fzf-tmux --prompt='cd hitory > ' --no-sort)"
    if [ -n "$d" ]; then
        LBUFFER="cd $d"
        zle accept-line
    else
        zle redisplay
    fi
}
zle     -N    fzf-cd-history

fzf-history-widget() {
  local selected num
  selected=(
      $(fc -l 1 | \
               fzf-tmux +s --tac +m -n2..,.. \
                        --tiebreak=index \
                        --toggle-sort=ctrl-r \
                        --prompt='history > ' \
                        -q "${LBUFFER//$/\\$}")
  )
  if [ -n "$selected" ]; then
    num=$selected[1]
    if [ -n "$num" ]; then
      zle vi-fetch-history -n $num
    fi
  fi
  zle redisplay
}
zle     -N   fzf-history-widget

#############################################################
# 時間のかかったコマンドは、通知システムに通知する
# 参考: http://qiita.com/hayamiz/items/d64730b61b7918fbb970

timetrack_threshold=10 # seconds

export timetrack_threshold
export timetrack_ignore_progs

unset timetrack_start
unset timetrack_command

function preexec_start_timetrack() {
    export timetrack_command="$1"
    export timetrack_start="`date +%s`"
}

function preexec_end_timetrack() {
    local command="$timetrack_command"
    local exec_time
    local message

    if [[ -z "$timetrack_start" || \
          -z "$timetrack_threshold" ]]
    then return
    fi

    if [[ -z "$command" ]]
    then command="<UNKNOWN>"
    fi

    export timetrack_end=`date +%s`

    exec_time="$(( timetrack_end - timetrack_start ))"

    if [[ "$exec_time" -ge "$timetrack_threshold" ]]
    then
        message="Time: $exec_time seconds\nCOMMAND: $command"

        if which growlnotify &>/dev/null
        then echo "$message" | growlnotify -n "ZSH timetracker" --appIcon Terminal
        elif which notify-send &>/dev/null && [[ -z "$DISPLAY" ]]
        then notify-send --icon=terminal "Command finished" "$message"
        elif which terminal-notifier &>/dev/null
        then terminal-notifier -message "$message"
        fi

        echo $'\a'
    fi

    unset timetrack_start
    unset timetrack_command
}

if ( which growlnotify &>/dev/null || \
     which notify-send &>/dev/null || \
     which terminal-notifier &>/dev/null ) &&
       autoload -U add-zsh-hook 2>/dev/null
then
    add-zsh-hook preexec preexec_start_timetrack
    add-zsh-hook precmd preexec_end_timetrack
fi

## マシンごとの設定
! [[ -f ~/.zshrc.local ]] && touch ~/.zshrc.local
source ~/.zshrc.local

## rvm
source_if_exist "/usr/local/rvm/scripts/rvm" || \
    source_if_exist "$HOME/.rvm/scripts/rvm"

## nvm
source_if_exist "$HOME/.nvm/nvm.sh"

# fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

if [[ -x "$(which fzf-tmux)" ]]; then
    echo "Enable fzf-tmux"
    bindkey '^xp' fzf-ps
    bindkey '^xs' fzf-search-file
    bindkey '^x^f' fzf-find-file
    bindkey '^[x' fzf-exec
    bindkey '^[i' fzf-cd-history
    bindkey '^r' fzf-history-widget
fi

## rbenv
if which rbenv &> /dev/null && ! which rvm &> /dev/null
then
    echo load rbenv
    eval "$(rbenv init - zsh)"
fi

# zaw
# if source_if_exist "$HOME/.zshrc.d/zaw/zaw.zsh"
# then
#     bindkey "^o"   zaw-cdr
#     bindkey "^x^f" zaw-open-file
#     bindkey "^r"   zaw-history
#     bindkey "^xp"  zaw-process
#     bindkey "^xb"  zaw-git-branches
#     zstyle ':filter-select' case-insensitive yes
# fi

# syntax-highligting
source_if_exist "$HOME/.zshrc.d/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"

# golang utillityes which be installed by dpkg (apt)
source_if_exist "/usr/lib/go/misc/zsh/go"

# npm
which npm > /dev/null 2>&1 && . <(npm completion)

# racer: see installs/racer.sh
export RUST_SRC_PATH="$HOME/.local/rust/src"
